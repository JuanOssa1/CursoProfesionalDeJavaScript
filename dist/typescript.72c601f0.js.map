{"version":3,"sources":["ejercicios/typescript/index.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;AAYA;AACA,IAAI,KAAK,GAAY,IAArB;AACA,KAAK,GAAG,KAAR,EAEA;;AACA,IAAI,SAAS,GAAW,EAAxB;AACA,IAAI,WAAW,GAAW,CAA1B;AACA,IAAI,SAAS,GAAG,SAAS,GAAG,WAA5B,EAEA;;AACA,IAAI,MAAM,GAAW,MAArB;AACA,IAAI,MAAM,GAAG,YAAA,MAAA,CAAY,MAAZ,CAAb,EAEA;;AACA,IAAI,MAAM,GAAa,EAAvB;AACA,MAAM,GAAG,CAAC,OAAD,EAAU,QAAV,EAAmB,MAAnB,CAAT,EACA;;AAEA,IAAI,gBAAgB,GAA2B,EAA/C;AACA,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB;AACA,gBAAgB,CAAC,IAAjB,CAAsB,CAAtB,GAEA;;AACA,IAAK,KAAL;;AAAA,CAAA,UAAK,KAAL,EAAU;AACN,EAAA,KAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,KAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,KAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACH,CAJD,EAAK,KAAK,KAAL,KAAK,GAAA,EAAA,CAAV;;AAKA,IAAI,aAAa,GAAU,KAAK,CAAC,KAAjC,EACA;AACA;;AACA,OAAO,CAAC,GAAR,CAAY,wBAAA,MAAA,CAAwB,aAAxB,CAAZ,GACA;;AACA,IAAI,OAAO,GAAQ,OAAnB;AACA,OAAO,GAAG;AAAC,EAAA,IAAI,EAAE;AAAP,CAAV,EAEA;;AACA,IAAI,UAAU,GAAW;AAAC,EAAA,IAAI,EAAE;AAAP,CAAzB;AACA;AAGA;;AACA,SAAS,GAAT,CAAa,CAAb,EAAuB,CAAvB,EAA+B;AAC3B,SAAO,CAAC,GAAG,CAAX;AACH;;AAED,IAAM,GAAG,GAAG,GAAG,CAAC,CAAD,EAAG,CAAH,CAAf;AAGA;;;;;AAIA,SAAS,WAAT,CAAqB,CAArB,EAA8B;AAC1B,SAAO,UAAS,CAAT,EAAkB;AACrB,WAAO,CAAC,GAAG,CAAX;AACH,GAFD;AAGH;;AAED,IAAM,OAAO,GAAG,WAAW,CAAC,CAAD,CAA3B;AACA,IAAM,SAAS,GAAG,OAAO,CAAC,CAAD,CAAzB;AAEA;;;AAGA;;AACA;;AACA,SAAS,QAAT,CAAkB,SAAlB,EAAqC,QAArC,EAAsD;AAClD,SAAO,GAAA,MAAA,CAAG,SAAH,EAAY,GAAZ,EAAY,MAAZ,CAAgB,QAAhB,CAAP;AACH;;AACD,IAAM,QAAQ,GAAG,QAAQ,CAAC,MAAD,CAAzB;AACA,OAAO,CAAC,GAAR,CAAY,QAAZ;AAUA;;;;AAGA,IAAI,IAAI,GAAe;AACnB,EAAA,KAAK,EAAE,CADY;AAEnB,EAAA,IAAI,EAAE,CAFa;AAGnB,EAAA,KAAK,EAAE,KAAK,CAAC;AAHM,CAAvB;;AAOA,SAAS,IAAT,CAAc,CAAd,EAA2B;AACvB,SAAO,CAAC,CAAC,IAAF,GAAO,CAAC,CAAC,KAAhB;AACH;;AACD,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAD,CAArB;AACA,OAAO,CAAC,GAAR,CAAY,QAAZ;AAEA,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,QAAL,EAAZ;AAGA;;AACA,IAAI,CAAC,QAAL,GAAiB,YAAA;AACb,SAAO,KAAK,KAAL,GAAa,iBAAA,MAAA,CAAiB,KAAK,KAAtB,CAAb,GAA6C,eAApD;AACH,CAFD;;AAGA,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,QAAL,EAAZ","file":"typescript.72c601f0.js","sourceRoot":"..","sourcesContent":["\n/*\nvar message: string = 'Hello World';\nconsole.log(message);\nconsole.log(\"Hello, TypeScript\");\n\nfunction add(a: number, b: number){\n    return a + b;\n\n}\nconst sum = add(2,3)\nconsole.log(sum)\n*/\n//Boolean en Typescript\nlet muted: boolean = true;\nmuted = false;\n\n//Numeros\nlet numerador: number = 42;\nlet denominador: number = 6;\nlet resultado = numerador / denominador;\n\n//String \nlet nombre: string = 'Juan';\nlet saludo = `Me llamo ${nombre}`;\n\n//Arreglos\nlet people: string[] = [];\npeople = [\"carla\", \"nicole\",\"raul\"]\n//people.push(9000) no se puede porque solo es de strings\n\nlet peopleAndNumbers: Array<string | number> = []\npeopleAndNumbers.push('Carlos');\npeopleAndNumbers.push(5);\n\n//Enum variabnle que esta denotada a solo unos colres definidos\nenum Color {\n    Rojo = \"Rojo\",\n    verde = \"Verde\",\n    Azul = \"Azul\",\n}\nlet colorFavorito: Color = Color.verde;\n//Aqui no me imprime el color si no la posicion porque el enum asgina son las posiciones por eso\n//es que en el enum a cada opcion le debo asdignar un valor\nconsole.log(`Mi color favorito es ${colorFavorito}`)\n//Any\nlet comodin: any = \"Joker\"\ncomodin = {type: \"Wildcard\"};\n\n//Object\nlet someObject: object = {type: \"Wildcard\"};\n/**Typescript deja especifico para los objetos y eso facilita muchas cosas*/\n\n\n//Funciones antes de abrir las llaves le podemos especificar el retorno como hicimos aqui\nfunction add(a:number, b:number): number{\n    return a + b;\n}\n\nconst sum = add(5,4);\n\n\n/**Esto es como una funcion en cadena\n * es una pendejada hacerlo asi pero bueno\n * embeces la vida no es como queremos\n */\nfunction createAdder(a: number): (numerito)=> number{\n    return function(b: number){\n        return b + a;\n    };\n}\n\nconst addFour = createAdder(4);\nconst fourPlus6 = addFour(6);\n\n/**Con el signo de interrogacion le digo que ese parametro sera\n * opcional lo que significa que puede ser undefined o string\n */\n//function fullName(firstName: string, lastName: string = 'smith') asi lo que haria es que\n/**si no ingresa un valor entonces pone ese por default */\nfunction fullName(firstName: string, lastName?: string): string{\n    return `${firstName} ${lastName}`\n}\nconst miNombre = fullName('Juan');\nconsole.log(miNombre);\n\n\n//Interfaces\ninterface Rectangulo {\n    ancho: number\n    alto: number\n    color?: Color\n}\n\n/**Aqui estoy haciendo uso de esa interface y como en java \n * pues tiene que tener todo loq ue tiene esta inter4faz\n */\nlet rect: Rectangulo = {\n    ancho: 4,\n    alto: 6,\n    color: Color.Azul\n\n}\n\nfunction area(r: Rectangulo){\n    return r.alto*r.ancho;\n}\nconst areaRect = area(rect);\nconsole.log(areaRect);\n\nconsole.log(rect.toString());\n\n\n/**Aqui es como si estuviera editando la funcion string */\nrect.toString  = function()  {\n    return this.color ? `Un rectangulo ${this.color}` : `Un rectangulo`\n}\nconsole.log(rect.toString());"]}